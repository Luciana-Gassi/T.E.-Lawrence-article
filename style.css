*,
::before,
::after {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

html {
    font-size: 62.5%;
}

body {
    font-family: 'Quattrocento Sans', serif;
    color: linen;
    background-color: #211309;
}

h1 {
    font-family: 'Playfair Display SC', sans-serif;
    font-size: smaller;
}

h2,
h3,
h4,
h5,
h6 {
    font-family: 'Cinzel Decorative', sans-serif;
}

a {
    text-decoration: none;
    color: linen;
}

main {

/* Now you can style the layout of your grid. CSS Grid is similar to Flexbox in that it has 
a special property for both the parent and child elements. 
In this case, your parent element is the main element. Set the content to have a three-column layout 
by adding a grid-template-columns property with a value of 1fr 94rem 1fr. 
This will create three columns where the middle column is 94rem wide,
and the first and last columns are both 1 fraction of the remaining space in the grid container. */

    display: grid;

/* Use the minmax function to make your columns responsive on any device. 
The minmax function takes two arguments, the first being the minimum value and the second being 
the maximum. These values could be a length, percentage, fr, or even a keyword like max-content. */

    grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(2rem, 1fr);
    row-gap: 3rem;
}

#hero-photo {
    width: 50%;
    object-fit: cover;
    display: block;
    margin: 0 auto;
}
img {
    width: 100%;
    object-fit: cover;
}

hr {
    margin: 1.5rem 0;
    border: 1px solid rgba(120, 120, 120, 0.6);
}

.heading {

/* Your magazine will have three primary sections. You already set the overall layout in the main 
rule, but you can adjust the placement in the child rules. 
One option is the grid-column property, which is shorthand for grid-column-start and grid-column-end. 
The grid-column property tells the grid item which grid line to start and end at. 
Create a .heading rule and set the grid-column property to 2 / 3. 
This will tell the .heading element to start at grid line 2 and end at grid line 3. */

    grid-column: 2 / 3;
    display: grid;

/* The CSS repeat() function is used to repeat a value, rather than writing it out manually,
and is helpful for grid layouts. For example, setting the grid-template-columns property 
to repeat(20, 200px) would create 20 columns each 200px wide. */

    grid-template-columns: repeat(2, 1fr);
    row-gap: 1.5rem;
}


/* Your .text element is not a CSS Grid,
but you can create columns within an element without using Grid 
by using the column-width property. */
.text {
    grid-column: 2 / 3;
    font-size: 1.8rem;
    letter-spacing: 0.6px;
    column-width: 25rem;

/* Magazines often use justified text in their printed content to structure their layout and 
control the flow of their content. 
While this works in printed form, justified text on websites can be an accessibility concern,
for example presenting challenges for folks with dyslexia. 
To make your project look like a printed magazine,
give the .text selector a text-align property set to justify. */

    text-align: justify;
}

/* Remember that the grid-column property determines which columns an element 
starts and ends at. 
There may be times where you are unsure of how many columns your grid will have, 
but you want an element to stop at the last column. 
To do this, you can use -1 for the end column. */

.hero {
    grid-column: 1 / -1;
    position: relative;
    margin: 20px auto 30px;
}

.hero-title {
    text-align: center;
    color: #defc71;
    font-size: 8rem;
}

.hero-subtitle {
    font-size: 2.4rem;
    color: #32CD32;
    text-align: center;
}

.author {
    font-size: 2rem;
    font-family: "Raleway", sans-serif;
}

.author-name a:hover {
    background-color: #306203;
}

.publish-date {
    color: rgba(255, 255, 255, 0.5);
}

/* If you wanted to add more social icons, but keep them on the same row, 
you would need to update grid-template-columns to create additional columns. 
As an alternative, you can use the grid-auto-flow property. 
This property takes either row or column  as the first value, with an optional 
second value of dense. grid-auto-flow uses an auto-placement algorithm 
to adjust the grid layout. 
Setting it to column will tell the algorithm to create new columns for content 
as needed. 
The dense value allows the algorithm to backtrack and fill holes in the grid 
with smaller items, which can result in items appearing out of order.
Now the auto-placement algorithm will kick in when you add a new icon element. 
However, the algorithm defaults the new column width to be auto, which 
will not match your current columns. 
You can override this with the grid-auto-columns property. */

.social-icons {
    display: grid;
    font-size: 3rem;
    grid-template-columns: repeat(5, 1fr);
    grid-auto-flow: column;
    grid-auto-columns: 1fr;
    align-items: center;
}

.indent {
    text-indent: 20px;
}

.indent::first-letter {
    color: #32CD32;
}

/* The ::first-letter pseudo-selector allows you to target the first letter 
in the text content of an element. */

.first-paragraph::first-letter {
    font-size: 6rem;
    color: #32CD32;

/* The other text has been shifted out of place. 
Move it into position by giving the .first-paragraph::first-letter selector 
a float property set to left and a margin-right property set to 1rem. */

    float: left;
    margin-right: 1rem;
}

.quote {
    color: #32CD32;
    font-size: 2.4rem;
    text-align: center;
    font-family: "Raleway", sans-serif;
}

.quote::before {
    content: '" ';
}

.quote::after {
    content: ' "';
}

.last-quote {

    padding: 40px 0;
}
.text-with-images {
    display: grid;
    grid-template-columns: 1fr 2fr;
    column-gap: 3rem;
    margin-bottom: 3rem;
    margin-top: 3rem;
}

.lists {
    list-style-type: none;
    margin-top: 2rem;
}

.lists li {
    margin-bottom: 1.5rem;
}

.list-title,
.list-subtitle {
    color: #32CD32;
}

.image-wrapper {
    display: grid;
    grid-template-columns: 2fr 1fr;
    grid-template-rows: repeat(3, min-content);

/* The gap property is a shorthand way to set the value of 
column-gap and row-gap at the same time. 
If given one value, it sets the column-gap and row-gap both to that value. 
If given two values, it sets the row-gap to the first value 
and the column-gap to the second. 
Give the .image-wrapper selector a gap property set to 2rem. */

    gap: 2rem;

/* Much like Flexbox, with CSS Grid you can align the content of grid items 
with align-items and justify-items. 
align-items will align child elements along the column axis,
and justify-items will align child elements along the row axis. */

    /* The place-items property can be used to set the align-items and justify-items 
values at the same time. The place-items property takes one or two values. 
If one value is provided, it is used for both the align-items and justify-items 
properties. 
If two values are provided, the first value is used for the align-items property 
and the second value is used for the justify-items property. */

    place-items: center;
}

.image-1,
.image-3 {
    grid-column: 1 / -1;
}

@media only screen and (max-width: 720px) {
    .image-wrapper {
        grid-template-columns: 1fr;
    }
}

/* Create another @media query for only screen with a max-width of 600px. 
Within, create a .text-with-images rule and give it a grid-template-columns 
property of 1fr. 
This will collapse your bottom text area into a single column on smaller screens. */

@media only screen and (max-width: 600px) {
    .text-with-images {
        grid-template-columns: 1fr;
    }
}

@media only screen and (max-width: 550px) {
    .hero-title {
        font-size: 6rem;
    }

    .hero-subtitle,
    .author,
    .quote,
    .list-title {
        font-size: 1.8rem;
    }

    .social-icons {
        font-size: 2rem;
    }

    .text {
        font-size: 1.6rem;
    }
}

@media only screen and (max-width: 420px) {
    .hero-title {
        font-size: 4.5rem;
    }
}